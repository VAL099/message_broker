# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import broker_pb2 as broker__pb2


class handle_messagesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPublication = channel.unary_unary(
                '/msg_broker.handle_messages/GetPublication',
                request_serializer=broker__pb2.MessageWithContent.SerializeToString,
                response_deserializer=broker__pb2.Reply1.FromString,
                )
        self.BroadcastPublication = channel.unary_unary(
                '/msg_broker.handle_messages/BroadcastPublication',
                request_serializer=broker__pb2.RequestUpdate.SerializeToString,
                response_deserializer=broker__pb2.Publication.FromString,
                )
        self.HistoryHandler = channel.unary_stream(
                '/msg_broker.handle_messages/HistoryHandler',
                request_serializer=broker__pb2.RequestHistory.SerializeToString,
                response_deserializer=broker__pb2.History.FromString,
                )


class handle_messagesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPublication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastPublication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HistoryHandler(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_handle_messagesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPublication': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublication,
                    request_deserializer=broker__pb2.MessageWithContent.FromString,
                    response_serializer=broker__pb2.Reply1.SerializeToString,
            ),
            'BroadcastPublication': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastPublication,
                    request_deserializer=broker__pb2.RequestUpdate.FromString,
                    response_serializer=broker__pb2.Publication.SerializeToString,
            ),
            'HistoryHandler': grpc.unary_stream_rpc_method_handler(
                    servicer.HistoryHandler,
                    request_deserializer=broker__pb2.RequestHistory.FromString,
                    response_serializer=broker__pb2.History.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'msg_broker.handle_messages', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class handle_messages(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPublication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/msg_broker.handle_messages/GetPublication',
            broker__pb2.MessageWithContent.SerializeToString,
            broker__pb2.Reply1.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastPublication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/msg_broker.handle_messages/BroadcastPublication',
            broker__pb2.RequestUpdate.SerializeToString,
            broker__pb2.Publication.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HistoryHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/msg_broker.handle_messages/HistoryHandler',
            broker__pb2.RequestHistory.SerializeToString,
            broker__pb2.History.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
